// Comments
pipeline {
    agent {
        label 'orion'
    }
    options {
        disableConcurrentBuilds()
        timestamps()
    }
    
    stages {
        stage ('Verify Parameters') {
            steps {
                echo 'Verify Parameters'
                echo "Base URL   is ${JENKINS_URL}"
                echo "Git Branch is ${GIT_BRANCH}"
                echo "Git Commit is ${GIT_COMMIT}"
                echo "Git URL    is ${GIT_URL}"
            }
        }
        stage ('Compile') {
            steps {
                dir('src') {
                    sh "gcc -o ../bin/test1 test1.c"
                    sh "cppcheck --enable=warning --force --xml --xml-version=2 . 2> ../cppcheck.xml"
                    //shortCommit = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
                    //echo "shortCommit is ${shortCommit}"
                }
            }
        }
        stage ('Test') {
            steps {
                sh "cd $WORKSPACE; bin/test1"
            }
        }
    }
    post {
        always {
            updateGithubCommitStatus(currentBuild)
        }
        success {
            script {
                if(fileExists('cppcheck.xml')) {
                    archiveArtifacts artifacts: 'cppcheck.xml'
                }
            }
        }
    }
}

def getRepoURL() {
  sh "git config --get remote.origin.url > .git/remote-url"
  return readFile(".git/remote-url").trim()
}
 
def getCommitSha() {
  sh "git rev-parse HEAD > .git/current-commit"
  return readFile(".git/current-commit").trim()
}
 
def updateGithubCommitStatus(build) {
  // workaround https://issues.jenkins-ci.org/browse/JENKINS-38674
  repoUrl = getRepoURL()
  commitSha = getCommitSha()
 
  step([
    $class: 'GitHubCommitStatusSetter',
    reposSource: [$class: "ManuallyEnteredRepositorySource", url: repoUrl],
    commitShaSource: [$class: "ManuallyEnteredShaSource", sha: commitSha],
    errorHandlers: [[$class: 'ShallowAnyErrorHandler']],
    statusResultSource: [
      $class: 'ConditionalStatusResultSource',
      results: [
        [$class: 'BetterThanOrEqualBuildResult', result: 'SUCCESS', state: 'SUCCESS', message: build.description],
        [$class: 'BetterThanOrEqualBuildResult', result: 'FAILURE', state: 'FAILURE', message: build.description],
        [$class: 'AnyBuildResult', state: 'FAILURE', message: 'Loophole']
      ]
    ]
  ])
}
